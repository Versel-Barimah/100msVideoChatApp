import { EventEmitter2 as EventEmitter } from 'eventemitter2';
import { IStore } from '../../sdk/store';
import { PolicyParams } from '../HMSNotifications';
import { PublishParams } from '../../interfaces';
/**
 * Handles:
 * - Set policy with publishParams, simulcast layers to store
 * - Emit 'local-peer-role-update' to trigger RoleChangeManager to publish/unpublish local tracks
 * - Emit 'policy-change' to finish preview before calling listener.onPreview
 */
export declare class PolicyChangeManager {
    private store;
    private eventEmitter;
    constructor(store: IStore, eventEmitter: EventEmitter);
    handlePolicyChange(params: PolicyParams): void;
    setSimulcastLayers(publishParams?: PublishParams): void;
    handleStreamingRecordingPermissions(permissions?: {
        recording?: boolean;
        streaming?: boolean;
    }): void;
}
