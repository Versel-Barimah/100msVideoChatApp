import { HMSAudioListener, HMSUpdateListener } from '../interfaces';
import { HMSRemoteTrack } from '../media/tracks';
import { IStore } from '../sdk/store';
export declare class NotificationManager {
    private store;
    private listener?;
    private audioListener?;
    private TAG;
    private trackManager;
    private peerManager;
    private peerListManager;
    private activeSpeakerManager;
    private broadcastManager;
    private policyChangeManager;
    private requestManager;
    private roomUpdateManager;
    private eventEmitter;
    /**
     * room state can be sent before join in preview stage as well but that is outdated, based on
     * eventual consistency and doesn't have all data. If we get at least one consistent room update
     * from that point onwards we can rely on live server updates and ignore periodic room state messages
     */
    private hasConsistentRoomStateArrived;
    constructor(store: IStore, listener?: HMSUpdateListener | undefined, audioListener?: HMSAudioListener | undefined);
    setListener(listener?: HMSUpdateListener): void;
    setAudioListener(audioListener?: HMSAudioListener): void;
    addEventListener(event: string, listener: EventListener): void;
    removeEventListener(event: string, listener: EventListener): void;
    once(event: string, listener: EventListener): void;
    handleNotification(message: {
        method: string;
        params: any;
    }, isReconnecting?: boolean): void;
    ignoreNotification: (method: string) => boolean;
    handleTrackAdd: (track: HMSRemoteTrack) => void;
    handleTrackRemove: (track: HMSRemoteTrack) => void;
    updateLocalPeer: ({ name, metadata }: {
        name?: string | undefined;
        metadata?: string | undefined;
    }) => void;
}
