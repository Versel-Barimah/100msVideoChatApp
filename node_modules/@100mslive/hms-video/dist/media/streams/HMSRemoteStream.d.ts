import HMSSubscribeConnection from '../../connection/subscribe';
import HMSMediaStream from './HMSMediaStream';
import { HMSSimulcastLayer } from '../../interfaces';
/** @internal */
export default class HMSRemoteStream extends HMSMediaStream {
    private readonly connection;
    private audio;
    private video;
    private frameRate;
    constructor(nativeStream: MediaStream, connection: HMSSubscribeConnection);
    setAudio(enabled: boolean): void;
    /**
     * Sets the video layer after receiving new state from SFU. This is used when server side subscribe
     * degradation is ON.
     * @param layer is simulcast layer to be set
     */
    setVideoLayer(layer: HMSSimulcastLayer): void;
    /**
     * Sets the video layer and updates the track state to SFU via api datachannel. This is used when client
     * side subscribe degradation is ON or client unsubscribes the current track.
     * @param layer is simulcast layer to be set
     */
    setVideo(layer: HMSSimulcastLayer): void;
    getSimulcastLayer(): HMSSimulcastLayer;
    isAudioSubscribed(): boolean;
    isServerHandlingDegradation(): boolean;
    private syncWithApiChannel;
}
